<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Movie;
use AppBundle\Entity\Quality;
use AppBundle\Entity\Torrent;
use DateTime;
use Doctrine\ORM\Query;
use Doctrine\ORM\QueryBuilder;

/**
 * MovieRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MovieRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @param int $limit
     * @return mixed
     */
    public function findLatest(int $limit = 10) {
        return $this->createQueryBuilder('m')
            ->setMaxResults($limit)
            ->orderBy('m.createdAt', 'DESC')
            ->getQuery()
            ->execute();
    }

    /**
     * @param int $limit
     * @return mixed
     */
    public function findPopular(int $limit = 10) {
        return $this->createQueryBuilder('m')
            ->orderBy('m.downloaded', 'DESC')
            ->setMaxResults($limit)
            ->getQuery()
            ->execute();
    }

    /**
     * @param array $years
     * @return Query
     */
    public function getManyByYearsQuery(array $years): Query {
        $qb = $this->createQueryBuilder('m');

        foreach ($years as $index => $year) {
            $statement = 'm.releaseDate BETWEEN :from' . $index . ' AND :to' . $index;

            $from = DateTime::createFromFormat('Y-m-d', $year . '-01-01');
            $to = DateTime::createFromFormat('Y-m-d', (int)$year + 1 . '-01-01');

            if ($index == 0) {
                $qb->where($statement);
            } else {
                $qb->orWhere($statement);
            }

            $qb->setParameter('from' . $index, $from->format('Y-m-d'));
            $qb->setParameter('to' . $index, $to->format('Y-m-d'));
        }

        return $qb->getQuery();
    }

    /**
     *
     * @param array $genres
     * @return Query
     */
    public function getManyByGenresQuery(array $genres): Query {
        $qb = $this->createQueryBuilder('m');
        $qb->innerJoin('m.genres', 'g');

        $qb->where('g.name IN (:genreNames)')
            ->groupBy('m.id')
            ->having('count(g.name) = ' . count($genres))
            ->setParameter('genreNames', $genres);

        return $qb->getQuery();
    }

    /**
     * @return Query
     */
    public function getRecentQuery(): Query {
        return $this->createQueryBuilder('m')->orderBy('m.createdAt')->getQuery();
    }

    /**
     * @param string $keyword
     * @param string $quality
     * @param string $genre
     * @param int $rating
     * @param string $orderBy
     * @return Query
     */
    public function getByFiltersQuery(string $keyword, string $quality = null,
                                      string $genre = null, int $rating = null,
                                      string $orderBy = null): Query {
        $qb = $this->prepareQueryBuilderWithJoin($quality, $genre);

        if (!empty($keyword)) {
            $qb->andWhere('m.name LIKE :keyword');
            $qb->setParameter('keyword', '%' . $keyword . '%');
        }

        if ($genre != null) {
            if ($genre != "All") {
                $qb->andWhere('g.name = :genreName');
                $qb->setParameter('genreName', $genre);
            }
        }

        if ($rating != 0 || $rating != null) {
            $qb->andWhere('m.imdbRating >= :rating');
            $qb->setParameter('rating', $rating);
        }

        if ($quality != null) {
            $qb->andWhere('q.format = :quality');
            $qb->setParameter('quality', $quality);
        }

        if ($orderBy != null) {
            switch ($orderBy) {
                case 'lates':
                    $qb->orderBy('m.createdAt', 'ASC');
                    break;
                case 'oldest':
                    $qb->orderBy('m.createdAt', 'DESC');
                    break;
                case 'sizelw':
                    $qb->orderBy('m.size', 'ASC');
                    break;
                case 'sizehg':
                    $qb->orderBy('m.size', 'DESC');
                    break;
                case 'year_asc':
                    $qb->orderBy('m.releaseDate', 'ASC');
                    break;
                case 'year_desc':
                    $qb->orderBy('m.releaseDate', 'DESC');
                    break;
                case 'A-Z':
                    $qb->orderBy('m.name', 'ASC');
                    break;
                case 'Z-A':
                    $qb->orderBy('m.name', 'DESC');
                    break;
                case 'topdl':
                    $qb->orderBy('m.downloaded', 'DESC');
                    break;
                case 'rating':
                    $qb->orderBy('m.imdbRating', 'DESC');
            }
        }

        return $qb->getQuery();
    }

    /**
     * @param string $quality
     * @param string $genre
     * @return QueryBuilder
     */
    private function prepareQueryBuilderWithJoin(string $quality = null, string $genre = null): QueryBuilder {
        $qb = $this->createQueryBuilder('m');

        if ($genre || $genre != null) {
            $qb->innerJoin('m.genres', 'g');
            $qb->addSelect('g');
        }

        if ($quality || $genre != null) {
            $qb->innerJoin('m.torrents', 't');
            $qb->innerJoin('t.quality', 'q');
            $qb->addSelect('t');
            $qb->addSelect('q');
        }

        return $qb;
    }

    /**
     * @param Torrent $torrent
     * @return Movie
     * @throws \Doctrine\ORM\NoResultException
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function findByTorrent(Torrent $torrent): Movie {
        return $this->createQueryBuilder('m')
            ->innerJoin('m.torrents', 't', 'WITH', 't.id = :torrentId')
            ->setParameter('torrentId', $torrent->getId())
            ->getQuery()
            ->getSingleResult();
    }

    /**
     * Make movie->downloaded++
     *
     * @param Movie $movie
     * @throws \Doctrine\ORM\OptimisticLockException
     * @throws \Doctrine\ORM\ORMException
     */
    public function downloadCountIterate(Movie $movie): void {
        $em = $this->getEntityManager();
        $movie->setDownloaded($movie->getDownloaded() + 1);
        $em->flush();
    }
}