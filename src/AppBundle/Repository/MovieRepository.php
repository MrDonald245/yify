<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Movie;
use AppBundle\Entity\Torrent;
use DateTime;
use Doctrine\ORM\Query;

/**
 * MovieRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MovieRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @param int $limit
     * @return mixed
     */
    public function findLatest(int $limit = 10) {
        return $this->createQueryBuilder('m')
            ->setMaxResults($limit)
            ->orderBy('m.createdAt', 'DESC')
            ->getQuery()
            ->execute();
    }

    /**
     * @param int $limit
     * @return mixed
     */
    public function findPopular(int $limit = 10) {
        return $this->createQueryBuilder('m')
            ->orderBy('m.downloaded', 'DESC')
            ->setMaxResults($limit)
            ->getQuery()
            ->execute();
    }

    /**
     * @param array $years
     * @return Query
     */
    public function getManyByYearsQuery(array $years): Query {
        $qb = $this->createQueryBuilder('m');

        foreach ($years as $index => $year) {
            $statement = 'm.releaseDate BETWEEN :from' . $index . ' AND :to' . $index;

            $from = DateTime::createFromFormat('Y-m-d', $year . '-01-01');
            $to = DateTime::createFromFormat('Y-m-d', (int)$year + 1 . '-01-01');

            if ($index == 0) {
                $qb->where($statement);
            } else {
                $qb->orWhere($statement);
            }

            $qb->setParameter('from' . $index, $from->format('Y-m-d'));
            $qb->setParameter('to' . $index, $to->format('Y-m-d'));
        }

        return $qb->getQuery();
    }

    /**
     *
     * @param array $genres
     * @return Query
     */
    public function getManyByGenresQuery(array $genres): Query {
        $qb = $this->createQueryBuilder('m');
        $qb->innerJoin('m.genres', 'g');

        $qb->where('g.name IN (:genreNames)')
            ->groupBy('m.id')
            ->having('count(g.name) = ' . count($genres))
            ->setParameter('genreNames', $genres);

        return $qb->getQuery();
    }

    /**
     * @return Query
     */
    public function getRecentQuery(): Query {
        return $this->createQueryBuilder('m')->orderBy('m.createdAt')->getQuery();
    }

    /**
     * @param Torrent $torrent
     * @return Movie
     * @throws \Doctrine\ORM\NoResultException
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function findByTorrent(Torrent $torrent): Movie {
        return $this->createQueryBuilder('m')
            ->innerJoin('m.torrents', 't', 'WITH', 't.id = :torrentId')
            ->setParameter('torrentId', $torrent->getId())
            ->getQuery()
            ->getSingleResult();
    }

    /**
     * Make movie->downloaded++
     *
     * @param Movie $movie
     * @throws \Doctrine\ORM\OptimisticLockException
     * @throws \Doctrine\ORM\ORMException
     */
    public function downloadCountIterate(Movie $movie): void {
        $em = $this->getEntityManager();
        $movie->setDownloaded($movie->getDownloaded() + 1);
        $em->flush();
    }
}